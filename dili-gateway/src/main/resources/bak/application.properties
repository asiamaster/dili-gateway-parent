#spring.profiles.active=${build.profile.id}
server.port=8285
redis.enable=true

spring.application.name=dili-gateway

## spring cloud gateway
# 不打开服务发现自动注册路由的方式
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
# 路由配置
#spring.cloud.gateway.routes[0].id=customer-service
#spring.cloud.gateway.routes[0].uri=lb://customer-service
#spring.cloud.gateway.routes[0].predicates[0]=Path=/api/**
## 熔断过滤器
#spring.cloud.gateway.routes[0].filters[0].name=Hystrix
#spring.cloud.gateway.routes[0].filters[0].args.name=defaultfallback
#spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback

# 下面的配置用于在网关层自定义动态的fallback uri，处理熔断业务。 本项目中是统一处理的(参考：forward:/fallback)
#spring.cloud.gateway.routes[0].filters[0]=RewritePath=/api/, /fallback/

# default全局有效，service id指定应用有效
# 如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
#hystrix.command.default.execution.timeout.enabled=true
# 断路器超时时间，默认5000ms
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
#feign.hystrix.enabled=true

## 这样配置会涉及到一个很严重的问题 那就是 所有服务公用一个熔断 fallbackcmd 这会导致 当一个子服务熔断后，所有服务都被熔断了。整个集群都不可用了。
#spring.cloud.gateway.default-filters[0].name=Hystrix
#spring.cloud.gateway.default-filters[0].args.name=fallbackcmd
#spring.cloud.gateway.default-filters[0].args.fallbackUri=forward:/fallback

# 跨域配置
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-origins="*"
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-methods[0]=GET
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-methods[1]=POST
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allowed-headers="*"
spring.cloud.gateway.globalcors.cors-configurations.'[/**]'.allow-credentials=true

#spring cloud
#nacos.discovery
spring.cloud.nacos.discovery.group=MICROSERVICE
spring.cloud.nacos.discovery.service=gateway-service

#logback
logging.config=classpath:conf/logback-springboot.xml

spring.cloud.gateway.enabled=true

# Lettuce
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=10000
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
# 关闭超时时间
spring.redis.lettuce.shutdown-timeout=100

# sentinel
spring.cloud.sentinel.enabled=true
spring.cloud.sentinel.filter.enabled=false
spring.cloud.sentinel.eager=true
spring.cloud.sentinel.transport.heartbeat-interval-ms=2000

#在使用 Endpoint 特性之前需要在 Maven 中添加 spring-boot-starter-actuator 依赖，并在配置中允许 Endpoints 的访问。
#暴露的 endpoint 路径为 /actuator/sentinel
management.endpoints.web.exposure.include=*

spring.cloud.sentinel.datasource.ds1.nacos.dataId=dili-gateway-sentinel-flow.json
spring.cloud.sentinel.datasource.ds1.nacos.data-type=json
spring.cloud.sentinel.datasource.ds1.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.ds1.nacos.namespace=Sentinel
spring.cloud.sentinel.datasource.ds1.nacos.ruleType=gw_flow

spring.cloud.sentinel.datasource.ds2.nacos.dataId=dili-gateway-sentinel-system.json
spring.cloud.sentinel.datasource.ds2.nacos.data-type=json
spring.cloud.sentinel.datasource.ds2.nacos.groupId=SENTINEL_GROUP
spring.cloud.sentinel.datasource.ds2.nacos.namespace=Sentinel
spring.cloud.sentinel.datasource.ds2.nacos.ruleType=system

spring.cloud.sentinel.scg.enabled=true
spring.cloud.sentinel.scg.fallback.mode=response
spring.cloud.sentinel.scg.fallback.responseBody={"code":429,"message":"服务开启限流保护,请稍后再试!"}
spring.cloud.sentinel.scg.fallback.response-status=429